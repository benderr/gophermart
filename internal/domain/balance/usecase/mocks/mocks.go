// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/benderr/gophermart/internal/domain/balance/usecase (interfaces: BalanceRepo,WithdrawsRepo)
//
// Generated by this command:
//
//	mockgen -destination=internal/domain/balance/usecase/mocks/mocks.go -package=mocks github.com/benderr/gophermart/internal/domain/balance/usecase BalanceRepo,WithdrawsRepo
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	balance "github.com/benderr/gophermart/internal/domain/balance"
	gomock "go.uber.org/mock/gomock"
)

// MockBalanceRepo is a mock of BalanceRepo interface.
type MockBalanceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceRepoMockRecorder
}

// MockBalanceRepoMockRecorder is the mock recorder for MockBalanceRepo.
type MockBalanceRepoMockRecorder struct {
	mock *MockBalanceRepo
}

// NewMockBalanceRepo creates a new mock instance.
func NewMockBalanceRepo(ctrl *gomock.Controller) *MockBalanceRepo {
	mock := &MockBalanceRepo{ctrl: ctrl}
	mock.recorder = &MockBalanceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceRepo) EXPECT() *MockBalanceRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBalanceRepo) Add(arg0 context.Context, arg1 *sql.Tx, arg2 string, arg3 *float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockBalanceRepoMockRecorder) Add(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBalanceRepo)(nil).Add), arg0, arg1, arg2, arg3)
}

// GetBalanceByUser mocks base method.
func (m *MockBalanceRepo) GetBalanceByUser(arg0 context.Context, arg1 *sql.Tx, arg2 string) (*balance.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*balance.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByUser indicates an expected call of GetBalanceByUser.
func (mr *MockBalanceRepoMockRecorder) GetBalanceByUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByUser", reflect.TypeOf((*MockBalanceRepo)(nil).GetBalanceByUser), arg0, arg1, arg2)
}

// Withdraw mocks base method.
func (m *MockBalanceRepo) Withdraw(arg0 context.Context, arg1 *sql.Tx, arg2 string, arg3 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockBalanceRepoMockRecorder) Withdraw(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockBalanceRepo)(nil).Withdraw), arg0, arg1, arg2, arg3)
}

// MockWithdrawsRepo is a mock of WithdrawsRepo interface.
type MockWithdrawsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawsRepoMockRecorder
}

// MockWithdrawsRepoMockRecorder is the mock recorder for MockWithdrawsRepo.
type MockWithdrawsRepoMockRecorder struct {
	mock *MockWithdrawsRepo
}

// NewMockWithdrawsRepo creates a new mock instance.
func NewMockWithdrawsRepo(ctrl *gomock.Controller) *MockWithdrawsRepo {
	mock := &MockWithdrawsRepo{ctrl: ctrl}
	mock.recorder = &MockWithdrawsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawsRepo) EXPECT() *MockWithdrawsRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWithdrawsRepo) Create(arg0 context.Context, arg1 *sql.Tx, arg2, arg3 string, arg4 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWithdrawsRepoMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWithdrawsRepo)(nil).Create), arg0, arg1, arg2, arg3, arg4)
}
